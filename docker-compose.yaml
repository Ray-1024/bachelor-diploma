version: '3.9'

services:

  postgresql:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    networks:
      - backend_network


  consul:
    image: hashicorp/consul:1.14.0
    container_name: consul
    ports:
      - "8500:8500"
      - "8600:8600/udp"
    command: agent -dev -client=0.0.0.0
    networks:
      - backend_network


  haproxy:
    image: haproxy:2.2-alpine
    container_name: haproxy
    depends_on:
      - consul
    restart: always
    volumes:
      - ./haproxy:/usr/local/etc/haproxy
    ports:
      - "8080:7000"
      - "8404:8404"
    networks:
      - frontend_network
      - backend_network


  minio:
    image: minio/minio
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    command: server /data --console-address ":9001"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - backend_network
  

  article-service:
    build: ./article-service
    container_name: article-service
    depends_on:
      - postgresql
      - minio
      - consul
      - haproxy
    restart: always
    ports:
      - "10000:8080"
    networks:
      - backend_network


  frontend:
    build: ./frontend
    container_name: frontend
    restart: always
    ports:
      - "20000:8080"
    networks:
      - frontend_network


  problem-service:
    build: ./problem-service
    container_name: problem-service
    depends_on:
      - postgresql
      - consul
      - haproxy
    restart: always
    ports:
      - "30000:8080"
    networks:
      - backend_network


  submission-testing-worker-service:
    build: ./submission-testing-worker
    container_name: submission-testing-worker-service
    depends_on:
      - postgresql
    restart: always
    ports:
      - "40000:8080"
    networks:
      - backend_network


  user-service:
    build: ./user-service
    container_name: user-service
    depends_on:
      - postgresql
      - consul
      - haproxy
    restart: always
    ports:
      - "50000:8080"
    networks:
      - backend_network


volumes:
  minio_data:

networks:
  backend_network:
    driver: bridge
  #    internal: true
  frontend_network:
    driver: bridge
